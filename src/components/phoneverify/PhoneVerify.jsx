// ‚úÖ ReactJS component for phone verification with Eskiz auto token
// Assumes axios instance in src/api.js with baseURL and auth headers when needed

import React, { useState } from "react";
import API from "../api";

export default function PhoneVerify() {
    const [step, setStep] = useState("enter");
    const [phone, setPhone] = useState("");
    const [code, setCode] = useState("");
    const [loading, setLoading] = useState(false);

    // Send code to phone
    const handleSend = async () => {
        if (!phone.match(/^998\d{9}$/)) {
            alert("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 998xxxxxxxxx");
            return;
        }
        setLoading(true);
        try {
            await API.post("api/call_phone/send-sms-code/", { phone });
            setStep("verify");
            alert("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üì≤");
        } catch (err) {
            alert(err.response?.data?.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");
        } finally {
            setLoading(false);
        }
    };

    // Verify code
    const handleVerify = async () => {
        if (code.length !== 4) {
            alert("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 4‚Äë—Ö –∑–Ω–∞—á–Ω—ã–º");
            return;
        }
        setLoading(true);
        try {
            await API.post("api/call_phone/verify-sms-code/", { phone, code });
            alert("‚úÖ –ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");
            setStep("done");
        } catch (err) {
            alert(err.response?.data?.error || "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div style={{ maxWidth: 400, margin: "0 auto", textAlign: "center" }}>
            {step === "enter" && (
                <>
                    <h3>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h3>
                    <br /><br />
                    <input
                        placeholder="998901234567"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                    />
                    <br /><br /><br />
                    <button onClick={handleSend} disabled={loading}>
                        {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"}
                    </button>
                    <br /><br />
                </>
            )}

            {step === "verify" && (
                <>
                    <br />
                    <h3>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS</h3>
                    <input
                        placeholder="XXXX"
                        value={code}
                        onChange={(e) => setCode(e.target.value)}
                    />
                    <br /><br />
                    <button onClick={handleVerify} disabled={loading}>
                        {loading ? "–ü—Ä–æ–≤–µ—Ä–∫–∞..." : "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"}
                    </button>
                </>
            )}

            {step === "done" && <h3>–°–ø–∞—Å–∏–±–æ! –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ</h3>}
        </div>
    );
}
